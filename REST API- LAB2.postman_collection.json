{
	"info": {
		"_postman_id": "0c66fcaf-fc52-4605-91f3-ce177fabc1f3",
		"name": "REST API: LAB2",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16239152"
	},
	"item": [
		{
			"name": "Students",
			"item": [
				{
					"name": "Get all students data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get all students data",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 00:58:31 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"firstName\": \"Student\",\n        \"lastName\": \"One\",\n        \"email\": \"student1@example.com\",\n        \"major\": \"Major 1\",\n        \"gpa\": 3.5,\n        \"coursesTaken\": [\n            {\n                \"id\": 1,\n                \"name\": \"Fundamental Programming Practices\",\n                \"code\": \"CS400\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"Modern Programming Practices\",\n                \"code\": \"CS401\"\n            },\n            {\n                \"id\": 3,\n                \"name\": \"Enterprise Architecture\",\n                \"code\": \"CS544\"\n            },\n            {\n                \"id\": 4,\n                \"name\": \"Algorithms\",\n                \"code\": \"CS435\"\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"firstName\": \"Student\",\n        \"lastName\": \"Two\",\n        \"email\": \"student2@example.com\",\n        \"major\": \"Major 2\",\n        \"gpa\": 3.8,\n        \"coursesTaken\": [\n            {\n                \"id\": 2,\n                \"name\": \"Modern Programming Practices\",\n                \"code\": \"CS401\"\n            },\n            {\n                \"id\": 5,\n                \"name\": \"Software Engineering\",\n                \"code\": \"CS425\"\n            },\n            {\n                \"id\": 6,\n                \"name\": \"Web Application Programming\",\n                \"code\": \"CS472\"\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"firstName\": \"Student\",\n        \"lastName\": \"Three\",\n        \"email\": \"student3@example.com\",\n        \"major\": \"Major 3\",\n        \"gpa\": 3,\n        \"coursesTaken\": [\n            {\n                \"id\": 2,\n                \"name\": \"Modern Programming Practices\",\n                \"code\": \"CS401\"\n            },\n            {\n                \"id\": 5,\n                \"name\": \"Software Engineering\",\n                \"code\": \"CS425\"\n            },\n            {\n                \"id\": 6,\n                \"name\": \"Web Application Programming\",\n                \"code\": \"CS472\"\n            }\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Get all courses taken by student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/1/courses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1",
								"courses"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get all courses taken by student",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/1/courses",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"1",
										"courses"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 03:21:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Fundamental Programming Practices\",\n        \"code\": \"CS400\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Modern Programming Practices\",\n        \"code\": \"CS401\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Enterprise Architecture\",\n        \"code\": \"CS544\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Algorithms\",\n        \"code\": \"CS435\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get all students by major",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students?major=Major 2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							],
							"query": [
								{
									"key": "major",
									"value": "Major 2"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get all students by major",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/students?major=Major 2",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									],
									"query": [
										{
											"key": "major",
											"value": "Major 2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 01:59:54 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"firstName\": \"Student\",\n        \"lastName\": \"Two\",\n        \"email\": \"student2@example.com\",\n        \"major\": \"Major 2\",\n        \"gpa\": 3.8,\n        \"coursesTaken\": [\n            {\n                \"id\": 2,\n                \"name\": \"Modern Programming Practices\",\n                \"code\": \"CS401\"\n            },\n            {\n                \"id\": 5,\n                \"name\": \"Software Engineering\",\n                \"code\": \"CS425\"\n            },\n            {\n                \"id\": 6,\n                \"name\": \"Web Application Programming\",\n                \"code\": \"CS472\"\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"firstName\": \"Student\",\n        \"lastName\": \"Three\",\n        \"email\": \"student3@example.com\",\n        \"major\": \"Major 2\",\n        \"gpa\": 3,\n        \"coursesTaken\": [\n            {\n                \"id\": 2,\n                \"name\": \"Modern Programming Practices\",\n                \"code\": \"CS401\"\n            },\n            {\n                \"id\": 5,\n                \"name\": \"Software Engineering\",\n                \"code\": \"CS425\"\n            },\n            {\n                \"id\": 6,\n                \"name\": \"Web Application Programming\",\n                \"code\": \"CS472\"\n            }\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Get student by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get student by ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 00:59:34 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"firstName\": \"Student\",\n    \"lastName\": \"One\",\n    \"email\": \"student1@example.com\",\n    \"major\": \"Major 1\",\n    \"gpa\": 3.5,\n    \"coursesTaken\": [\n        {\n            \"id\": 1,\n            \"name\": \"Fundamental Programming Practices\",\n            \"code\": \"CS400\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Modern Programming Practices\",\n            \"code\": \"CS401\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Enterprise Architecture\",\n            \"code\": \"CS544\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Algorithms\",\n            \"code\": \"CS435\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Create student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 4,\n    \"firstName\": \"Student\",\n    \"lastName\": \"Four\",\n    \"email\": \"student4@example.com\",\n    \"major\": \"Major 4\",\n    \"gpa\": 4,\n    \"coursesTaken\": [\n        {\n            \"id\": 1,\n            \"name\": \"Fundamental Programming Practices\",\n            \"code\": \"CS400\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Modern Programming Practices\",\n            \"code\": \"CS401\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Enterprise Architecture\",\n            \"code\": \"CS544\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Algorithms\",\n            \"code\": \"CS435\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "Create student",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 4,\n    \"firstName\": \"Student\",\n    \"lastName\": \"Four\",\n    \"email\": \"student4@example.com\",\n    \"major\": \"Major 4\",\n    \"gpa\": 4,\n    \"coursesTaken\": [\n        {\n            \"id\": 1,\n            \"name\": \"Fundamental Programming Practices\",\n            \"code\": \"CS400\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Modern Programming Practices\",\n            \"code\": \"CS401\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Enterprise Architecture\",\n            \"code\": \"CS544\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Algorithms\",\n            \"code\": \"CS435\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 01:03:29 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"firstName\": \"Student\",\n    \"lastName\": \"Four\",\n    \"email\": \"student4@example.com\",\n    \"major\": \"Major 4\",\n    \"gpa\": 4,\n    \"coursesTaken\": [\n        {\n            \"id\": 1,\n            \"name\": \"Fundamental Programming Practices\",\n            \"code\": \"CS400\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Modern Programming Practices\",\n            \"code\": \"CS401\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Enterprise Architecture\",\n            \"code\": \"CS544\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Algorithms\",\n            \"code\": \"CS435\"\n        }\n    ]\n}"
						},
						{
							"name": "Get all students data",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/students",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"students"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 01:03:41 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"firstName\": \"Student\",\n        \"lastName\": \"One\",\n        \"email\": \"student1@example.com\",\n        \"major\": \"Major 1\",\n        \"gpa\": 3.5,\n        \"coursesTaken\": [\n            {\n                \"id\": 1,\n                \"name\": \"Fundamental Programming Practices\",\n                \"code\": \"CS400\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"Modern Programming Practices\",\n                \"code\": \"CS401\"\n            },\n            {\n                \"id\": 3,\n                \"name\": \"Enterprise Architecture\",\n                \"code\": \"CS544\"\n            },\n            {\n                \"id\": 4,\n                \"name\": \"Algorithms\",\n                \"code\": \"CS435\"\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"firstName\": \"Student\",\n        \"lastName\": \"Two\",\n        \"email\": \"student2@example.com\",\n        \"major\": \"Major 2\",\n        \"gpa\": 3.8,\n        \"coursesTaken\": [\n            {\n                \"id\": 2,\n                \"name\": \"Modern Programming Practices\",\n                \"code\": \"CS401\"\n            },\n            {\n                \"id\": 5,\n                \"name\": \"Software Engineering\",\n                \"code\": \"CS425\"\n            },\n            {\n                \"id\": 6,\n                \"name\": \"Web Application Programming\",\n                \"code\": \"CS472\"\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"firstName\": \"Student\",\n        \"lastName\": \"Three\",\n        \"email\": \"student3@example.com\",\n        \"major\": \"Major 3\",\n        \"gpa\": 3,\n        \"coursesTaken\": [\n            {\n                \"id\": 2,\n                \"name\": \"Modern Programming Practices\",\n                \"code\": \"CS401\"\n            },\n            {\n                \"id\": 5,\n                \"name\": \"Software Engineering\",\n                \"code\": \"CS425\"\n            },\n            {\n                \"id\": 6,\n                \"name\": \"Web Application Programming\",\n                \"code\": \"CS472\"\n            }\n        ]\n    },\n    {\n        \"id\": 4,\n        \"firstName\": \"Student\",\n        \"lastName\": \"Four\",\n        \"email\": \"student4@example.com\",\n        \"major\": \"Major 4\",\n        \"gpa\": 4,\n        \"coursesTaken\": [\n            {\n                \"id\": 1,\n                \"name\": \"Fundamental Programming Practices\",\n                \"code\": \"CS400\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"Modern Programming Practices\",\n                \"code\": \"CS401\"\n            },\n            {\n                \"id\": 3,\n                \"name\": \"Enterprise Architecture\",\n                \"code\": \"CS544\"\n            },\n            {\n                \"id\": 4,\n                \"name\": \"Algorithms\",\n                \"code\": \"CS435\"\n            }\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Update student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"firstName\": \"Student\",\n    \"lastName\": \"One One\",\n    \"email\": \"student1@example.com\",\n    \"major\": \"Major 11\",\n    \"gpa\": 4,\n    \"coursesTaken\": [\n        {\n            \"id\": 1,\n            \"name\": \"Fundamental Programming Practices\",\n            \"code\": \"CS400\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Modern Programming Practices\",\n            \"code\": \"CS401\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Enterprise Architecture\",\n            \"code\": \"CS544\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Algorithms\",\n            \"code\": \"CS435\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/students/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": [
						{
							"name": "Update student",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"firstName\": \"Student\",\n    \"lastName\": \"One One\",\n    \"email\": \"student1@example.com\",\n    \"major\": \"Major 11\",\n    \"gpa\": 4,\n    \"coursesTaken\": [\n        {\n            \"id\": 1,\n            \"name\": \"Fundamental Programming Practices\",\n            \"code\": \"CS400\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Modern Programming Practices\",\n            \"code\": \"CS401\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Enterprise Architecture\",\n            \"code\": \"CS544\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Algorithms\",\n            \"code\": \"CS435\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/students/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 03:13:08 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"firstName\": \"Student\",\n    \"lastName\": \"One One\",\n    \"email\": \"student1@example.com\",\n    \"major\": \"Major 11\",\n    \"gpa\": 4,\n    \"coursesTaken\": [\n        {\n            \"id\": 1,\n            \"name\": \"Fundamental Programming Practices\",\n            \"code\": \"CS400\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Modern Programming Practices\",\n            \"code\": \"CS401\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Enterprise Architecture\",\n            \"code\": \"CS544\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Algorithms\",\n            \"code\": \"CS435\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Delete student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/students/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": [
						{
							"name": "Delete student",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/students/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 03:13:56 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				}
			]
		},
		{
			"name": "Courses",
			"item": [
				{
					"name": "Get all courses data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/courses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"courses"
							]
						}
					},
					"response": [
						{
							"name": "Get all courses data",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/courses",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"courses"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 03:53:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Fundamental Programming Practices\",\n        \"code\": \"CS400\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Modern Programming Practices\",\n        \"code\": \"CS401\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Enterprise Architecture\",\n        \"code\": \"CS544\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Algorithms\",\n        \"code\": \"CS435\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Software Engineering\",\n        \"code\": \"CS425\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Web Application Programming\",\n        \"code\": \"CS472\"\n    }\n]"
						}
					]
				},
				{
					"name": "Create course",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 7,\n    \"name\": \"Database Management Systems\",\n    \"code\": \"CS422\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/courses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"courses"
							]
						}
					},
					"response": [
						{
							"name": "Create course",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 7,\n    \"name\": \"Database Management Systems\",\n    \"code\": \"CS422\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/courses",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"courses"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 03:56:05 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 7,\n    \"name\": \"Database Management Systems\",\n    \"code\": \"CS422\"\n}"
						}
					]
				},
				{
					"name": "Update course",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"name\": \"Web Application Architecture and Frameworks\",\n    \"code\": \"CS545\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/courses/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"courses",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Update course",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"name\": \"Web Application Architecture and Frameworks\",\n    \"code\": \"CS545\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/courses/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"courses",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 03:58:29 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Web Application Architecture and Frameworks\",\n    \"code\": \"CS545\"\n}"
						}
					]
				},
				{
					"name": "Delete course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/courses/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"courses",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": [
						{
							"name": "Delete course",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/courses/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"courses",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 03 Apr 2024 04:00:16 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "localhost:8080"
		}
	]
}